
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author OLA
 */
public class Timetablepage extends javax.swing.JFrame {

    DbConnect dbcon = new DbConnect();
    Vector<Integer> lectural_id = new Vector<Integer>();
    Vector<String[]> hall = new Vector<String[]>();
    Vector<String[]> course = new Vector<String[]>();
    Vector<String[]> invigilator = new Vector<String[]>();
    Vector<String[]> period = new Vector<String[]>();
    Vector<String> department = new Vector<String>();
    String[][] table;
    String[][] report;
    String empAcc[];
    //  Vector<String[]> classInfo= new Vector<String[]>();
    int hl_size;
    int cls_size;
    String dept_String = "";
    String period_txt = "";
    String time_table_txt = "";
    int table_id;

    public Timetablepage(int id) {
        initComponents();
         if (id != 0) {
            table_id=id;
            fetchTable(id);
        }else{
        fetchCombo();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel17 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 255));
        jLabel1.setText("TIME TABLE PAGE");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, 150, 34));

        jPanel2.setBackground(new java.awt.Color(153, 0, 204));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable1.setCellSelectionEnabled(true);
        jTable1.setIntercellSpacing(new java.awt.Dimension(4, 4));
        jTable1.setRowHeight(30);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        jPanel2.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 880, 310));

        jButton3.setFont(new java.awt.Font("Trebuchet MS", 2, 14)); // NOI18N
        jButton3.setText("Refresh");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 320, 120, 40));

        jLabel12.setBackground(new java.awt.Color(153, 0, 204));
        jLabel12.setText("jLabel12");
        jLabel12.setOpaque(true);
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 230, -1, 70));

        jLabel15.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jLabel15.setText("No of Days:");
        jPanel2.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 70, 20));

        jLabel16.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jLabel16.setText("Hall:");
        jPanel2.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 540, 30, 20));

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jLabel2.setText("No of Periods:");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 330, 90, 20));

        jTextField4.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jTextField4.setText("0");
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });
        jPanel2.add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 320, 166, 39));

        jTextField3.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jTextField3.setText("0");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });
        jPanel2.add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 320, 162, 39));

        jButton6.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jButton6.setText("Set");
        jButton6.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 320, 90, 40));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 880, 370));

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jLabel3.setText("Hall accumulator");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 510, 120, 20));

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 530, 250, 130));

        jLabel17.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jLabel17.setText("Hall:");
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 470, 30, 20));

        jComboBox1.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 460, 250, 40));

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jLabel4.setText("Total hall capacity:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 660, 110, 35));

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(248, 244, 244));
        jTextField1.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jTextField1.setText("0");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 690, 166, 39));

        jTextField6.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField6, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 690, 166, 39));

        jLabel5.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jLabel5.setText("Time Table Name:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 760, 110, 20));

        jLabel7.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jLabel7.setText("course:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 470, -1, 28));

        jLabel11.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jLabel11.setText("Required Invigilator");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 660, 110, 35));

        jTextField5.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField5, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 750, 166, 39));

        jComboBox3.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 460, 380, 40));

        jLabel8.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jLabel8.setText("Course accumulator");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 510, 120, 20));

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 530, 390, 130));

        jLabel9.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jLabel9.setText("Total number of student:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 670, 140, -1));

        jTextField2.setEditable(false);
        jTextField2.setBackground(new java.awt.Color(248, 244, 244));
        jTextField2.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jTextField2.setText("0");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 690, 162, 39));

        jButton1.setBackground(new java.awt.Color(153, 153, 255));
        jButton1.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jButton1.setText("Assign");
        jButton1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 750, 120, 30));

        jButton2.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jButton2.setText("Save");
        jButton2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 750, 110, 30));

        jButton5.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jButton5.setText("close");
        jButton5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 760, 70, -1));

        jLabel13.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel13.setText("Controls");
        jLabel13.setOpaque(true);
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 430, 80, 20));

        jLabel10.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel10.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel10.setOpaque(true);
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 450, 870, 290));

        jLabel14.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel14.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 900, 390));

        jButton4.setBackground(new java.awt.Color(204, 204, 204));
        jButton4.setFont(new java.awt.Font("Trebuchet MS", 2, 14)); // NOI18N
        jButton4.setText("reset");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 750, 91, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-926)/2, (screenSize.height-828)/2, 926, 828);
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        if (jComboBox1.isFocusOwner() && jComboBox1.getSelectedIndex() > 0) {
            if (!jTextArea1.getText().contains(jComboBox1.getSelectedItem().toString())) {
                int size = Integer.parseInt(hall.elementAt(jComboBox1.getSelectedIndex() - 1)[2]);
                hl_size += size;
                jTextArea1.append(jComboBox1.getSelectedItem().toString() + " " + size + "\n");
                jTextField1.setText("" + hl_size);
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        lectural_id = new Vector<Integer>();
        hall = new Vector<String[]>();
        course = new Vector<String[]>();
        invigilator = new Vector<String[]>();
        period = new Vector<String[]>();
        department = new Vector<String>();
       fetchTable(table_id);

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        this.setVisible(false);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        if (jComboBox3.isFocusOwner() && jComboBox3.getSelectedIndex() > 0) {
            String a[] = jComboBox3.getSelectedItem().toString().split(" ");
            String lvl = a[a.length - 2] + " " + a[a.length - 1];
            String cos = a[0] + " " + a[1];
            String dept = jComboBox3.getSelectedItem().toString().replace(cos, "");
            dept = (dept.replace(lvl, "")).trim();
            cos = cos.replace(":", "");


            if (((jTextArea3.getText().contains(dept) && jTextArea3.getText().contains(dept + " " + lvl)) || (jTextArea3.getText().isEmpty()) || (!jTextArea3.getText().contains(dept))) && (!jTextArea3.getText().contains(cos))) {
                int size = Integer.parseInt(course.elementAt(jComboBox3.getSelectedIndex() - 1)[2]);
                jTextArea3.append(jComboBox3.getSelectedItem().toString() + " " + size + "\n");
                course.removeElementAt(jComboBox3.getSelectedIndex() - 1);
                jComboBox3.removeItemAt(jComboBox3.getSelectedIndex());
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false);
        new Timetablepage(0).setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        int days;
        int gperiod;
        try {
            days = Integer.parseInt(jTextField4.getText());
            gperiod = Integer.parseInt(jTextField3.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "A valid integer number require for days and period");
            jTextField3.requestFocus();
            return;
        }
        generateTable(days, gperiod);
        table = new String[jTable1.getRowCount()][jTable1.getColumnCount()];
        report = new String[jTable1.getRowCount()][jTable1.getColumnCount()];
        compilePeriod();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int i = jTable1.getSelectedColumn();
        if (i == 0) {
            return;
        }
        int j = jTable1.getSelectedRow();
        if (!jTable1.getValueAt(j, i).toString().isEmpty() && !jTable1.getValueAt(j, i).toString().equals("SELECTED")) {
            JOptionPane.showMessageDialog(rootPane, report[j][i]);
            JOptionPane.showMessageDialog(rootPane, table[j][i]);
        } else if (!jTable1.getValueAt(j, i).toString().isEmpty() && jTable1.getValueAt(j, i).toString().equals("SELECTED")) {
            jTable1.getModel().setValueAt("", j, i);
        } else {
            jTable1.getModel().setValueAt("SELECTED", j, i);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (checkPeriod() == true) {
            jButton6.setEnabled(false);
            jTextField3.setEditable(false);
            jTextField4.setEditable(false);
            assign();
            return;
        }
        JOptionPane.showMessageDialog(rootPane, "The selected period is not enough for scheduling");
        jTable1.requestFocus();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (jComboBox3.getItemCount() == 0) {
            int com = JOptionPane.showConfirmDialog(rootPane, "You have not schedule all the time courses\nare you sure you want to continue?", "Exam Time Table", JOptionPane.YES_NO_OPTION);
            if (com == JOptionPane.YES_OPTION) {
                saveToDb();
            }
            return;
        }
        saveToDb();

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Timetablepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Timetablepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Timetablepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Timetablepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Timetablepage(0).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration//GEN-END:variables

    private void fetchCombo() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        hall = new Vector<String[]>();
        course = new Vector<String[]>();
        //  classInfo= new Vector<String[]>();
        String data[];
        model.addElement("-- Select Hall --");
        try {
            String query = "select name,size,id from hall where status=0";

            dbcon.rs = dbcon.st.executeQuery(query);
            while (dbcon.rs.next()) {
                model.addElement(dbcon.rs.getString("name"));
                data = new String[]{dbcon.rs.getString("id"), dbcon.rs.getString("name"), dbcon.rs.getString("size")};
                hall.addElement(data);
            }

            jComboBox1.setModel(model);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "An Error Occur while fetching information from database");
            ex.printStackTrace();
        }

        DefaultComboBoxModel model1 = new DefaultComboBoxModel();
        model1.addElement("-- Select Course --");
        try {
            String query = "select id,code,department,level,size from course where status=0 order by department,level";

            dbcon.rs = dbcon.st.executeQuery(query);
            while (dbcon.rs.next()) {
                model1.addElement(dbcon.rs.getString("code") + ": " + dbcon.rs.getString("department") + " " + dbcon.rs.getString("level"));
                data = new String[]{dbcon.rs.getString("id"), dbcon.rs.getString("code"), dbcon.rs.getString("size"), dbcon.rs.getString("department"), dbcon.rs.getString("level")};
                course.addElement(data);
            }
            jComboBox3.setModel(model1);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "An Error Occur while fetching information from database");
            ex.printStackTrace();
        }
//        model1 = new DefaultComboBoxModel();
//        model1.addElement("-- Select Department --");
//        try {
//            String query = "select id,name from department where status=0";
//
//            dbcon.rs = dbcon.st.executeQuery(query);
//            while (dbcon.rs.next()) {
//                model1.addElement(dbcon.rs.getString("name"));
//                //  data= new String[]{dbcon.rs.getString("id"),dbcon.rs.getString("code"),dbcon.rs.getString("department"),dbcon.rs.getString("level"),dbcon.rs.getString("size")};
//                //  course.addElement(data);
//            }
//            jComboBox4.setModel(model1);
//        } catch (Exception ex) {
//            JOptionPane.showMessageDialog(rootPane, "An Error Occur while fetching information from database");
//            ex.printStackTrace();
//        }

    }

   

    private void generateTable(int days, int gperiod) {

        DefaultTableModel model = new DefaultTableModel();

        String[] object = new String[gperiod + 1];
        model.addColumn("DAY/PERIOD");
        for (int i = 0; i < gperiod; i++) {
            model.addColumn("Period " + (i + 1));
            object[i + 1] = "";
        }

        for (int i = 0; i < days; i++) {
            object[0] = "Day " + (i + 1);
            model.addRow(object);
        }
        jTable1.setModel(model);
    }

    private void invigilator_query(String query) {

        invigilator = new Vector<String[]>();
        try {
            dbcon.rs = dbcon.st.executeQuery(query);
            while (dbcon.rs.next()) {
                invigilator.addElement(new String[]{dbcon.rs.getString(2), dbcon.rs.getString(3)});
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void getDepts(String depart) {
        String brk[] = depart.split("\n");
        department = new Vector<String>();
        dept_String = "";
        cls_size = 0;
        for (int i = 0; i < brk.length; i++) {
            String a[] = brk[i].split(" ");
            String lvl = a[a.length - 3] + " " + a[a.length - 2];
            String cos = a[0] + " " + a[1];
            String dept = brk[i].replace(cos, "");
            int size = Integer.parseInt(a[a.length - 1]);
            dept = (dept.replace(lvl, "")).trim();
            dept = (dept.replace(size + "", "")).trim();
            cos = cos.replace(":", "");
            String d_str = dept + " " + lvl;
            if (!dept_String.contains(d_str)) {
                department.addElement(dept);
                dept_String += d_str + " " + size + "\n";
                cls_size += size;
            }
        }
        jTextField2.setText("" + cls_size);
        //  System.out.println(dept_String);

    }

    private void compileTableVector(int size) {
        for (int i = 0; i < size - 1; i++) {
            period.addElement(new String[]{""});
        }
    }

    private void assign() {
        int noofInvigilator;
        int hall_size;
        int class_size;
        String hallList = jTextArea1.getText();
        String courseList = jTextArea3.getText();

        try {
            noofInvigilator = Integer.parseInt(jTextField6.getText());
            class_size = Integer.parseInt(jTextField2.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Integer value require for invigilator Size");
            jTextField6.requestFocus();
            return;
        }
        compileTableVector(jTable1.getRowCount() * (jTable1.getColumnCount() - 1));
        String query = "SELECT id,name,code FROM invigelator ORDER BY RAND() limit 0," + noofInvigilator;
        invigilator_query(query);
        if (noofInvigilator > invigilator.size()) {
            JOptionPane.showMessageDialog(rootPane, "No of Available invilator is " + invigilator.size());
            jTextField6.requestFocus();
            return;
        }
        if (jTable1.getColumnCount() < 1) {
            JOptionPane.showMessageDialog(rootPane, "No of Days and Periods must be specify");
            jTextField3.requestFocus();
            return;

        }

        String hall_acc = "";
        Vector<String> course_period = new Vector<String>();
        String dept_acc = "";
        int c_size;
        String brk[] = courseList.split("\n");

        while (!jTextArea3.getText().trim().isEmpty()) {
            period_txt = "";
            time_table_txt = "";
            dept_acc = "";
            System.out.println("\n\n");
            c_size = 0;
            course_period = new Vector<String>();
            int course_size = 0;
            for (String d : department) {
                if (!dept_acc.contains("-" + d + "-")) {
                    dept_acc += "-" + d + "-";
                    for (int i = 0; i < brk.length; i++) {
                        if (course_period.indexOf(brk[i]) < 0 && !brk[i].isEmpty() && brk[i].contains(" " + d + " ")) {
                            System.out.println("course " + brk[i]);
                            time_table_txt += brk[i] + "\n\n";
                            period_txt += brk[i].replace(brk[i].split(" ")[brk[i].split(" ").length - 1], "") + "\n";
                            course_period.addElement(brk[i]);
                            String a[] = brk[i].split(" ");
                            c_size += Integer.parseInt(a[a.length - 1]);
                            course_size++;
                            String newText = jTextArea3.getText().replace(brk[i], "");
                            jTextArea3.setText("");
                            jTextArea3.append(newText.trim());
                            brk[i] = "";
                            break;
                        }
                    }
                }
            }
            System.out.println("\n\n");
            hallDistribution(hallList, course_period, noofInvigilator, c_size, course_size);
        }
        jTextArea1.setText("");
        jTextField1.setText("0");
        jTextField2.setText("0");
        hl_size = 0;
        jButton2.setEnabled(true);

    }

    private void hallDistribution(String hallList, Vector<String> course_period, int noofInvigilator, int c_size, int course_size) {
        String brk2[] = hallList.split("\n");
        int u = 0;
        int class_rm_acc[] = new int[course_period.size()];
        int invigilator_acc = 0;
        for (int i = 0; i < course_size; i++) {
            class_rm_acc[i] = 0;
        }
        String query = "SELECT id,name,code FROM invigelator ORDER BY RAND() limit 0," + noofInvigilator;
        invigilator_query(query);
        for (int i = 0; i < brk2.length; i++) {
            int hall_inv = 0;
            String b[] = brk2[i].split(" ");

            int h_size = Integer.parseInt(b[b.length - 1]);
            String hall_name = brk2[i].replace(h_size + "", "");
            System.out.println("\nHALL NAME: " + brk2[i]);
            time_table_txt += "\nHALL NAME: " + brk2[i] + "\n";
            if (i == brk2.length - 1) {
                hall_inv = noofInvigilator - invigilator_acc;
            } else {
                hall_inv = invigilator.size() * h_size / hl_size;
                if (hall_inv == 0) {
                    hall_inv = 1;
                }
            }

            System.out.println("no of invigilator " + hall_inv + "\n");
            time_table_txt += "no of invigilator " + hall_inv + "\n";
            for (int j = invigilator_acc; j < invigilator_acc + hall_inv; j++) {
                System.out.println(invigilator.elementAt(j)[0]);
                time_table_txt += invigilator.elementAt(j)[0] + "\n";
            }
            invigilator_acc += hall_inv;
            ++u;
            for (int j = 0; j < course_period.size(); j++) {

                String a[] = course_period.elementAt(j).split(" ");
                c_size = Integer.parseInt(a[a.length - 1]);
                double class_hall_ration = 0;
                if (u >= brk2.length) {
                    class_hall_ration = c_size - class_rm_acc[j];
                    u = 0;
                } else {
                    class_hall_ration = (int) ((h_size * c_size) / hl_size);
                }
                String text[] = course_period.elementAt(j).split(" ");
                String txt = course_period.elementAt(j);
                txt = txt.replace(text[text.length - 1], "");
                System.out.println(course_period.elementAt(j) + " " + " " + class_hall_ration);
                time_table_txt += txt + " " + " " + class_hall_ration + "\n";
                class_rm_acc[j] += class_hall_ration;
            }
        }

        compileTable((jTable1.getRowCount() * (jTable1.getColumnCount() - 1)), time_table_txt);
    }

    private void compileTable(int size, String txt) {
        //   for (int i = 0; i < size + jTable1.getRowCount(); i++) {
        boolean test = true;
        while (true) {
            int perd = (int) (Math.random() * (jTable1.getColumnCount()));
            int day = (int) (Math.random() * (jTable1.getRowCount()));
            if (jTable1.getValueAt(day, perd).toString().equalsIgnoreCase("SELECTED")) {
                table[day][perd] = period_txt;
                report[day][perd] = "Time Table\n DAY: " + (day + 1) + "PERIOD: " + (perd) + "\n" + txt;
                //                JOptionPane.showMessageDialog(rootPane, "Time Table\n DAY: " + (day + 1) + "PERIOD: " + (perd + 1) + "\n" + txt);
//                JOptionPane.showMessageDialog(rootPane, period_txt);
                jTable1.getModel().setValueAt(txt, day, perd);
                //test=false;
                break;
            }
        }
    }

    private boolean checkPeriod() {
        getDepts(jTextArea3.getText());
        int k = 0;
        int count = 0;
        String brk[] = jTextArea3.getText().split("\n");
        for (String dpt : department) {
            int j = 0;
            for (String dp : brk) {
                if (dp.contains(dpt)) {
                    j++;
                    if (j > k) {
                        k = j;
                    }
                }
            }
        }
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            for (int j = 1; j < jTable1.getColumnCount(); j++) {
                if (jTable1.getValueAt(i, j).toString().equalsIgnoreCase("SELECTED")) {
                    count++;
                }
            }
        }
        if (k > count) {
            return false;
        } else {
            return true;
        }
    }

    private void compilePeriod() {
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            for (int j = 0; j < jTable1.getColumnCount(); j++) {
                table[i][j] = "";
                report[i][j] = "";
            }

        }
    }

    private void saveToDb() {
        try {
            int id = 0;
            String query = "INSERT INTO time_table (name) value(?)";
            dbcon.ps = dbcon.con.prepareStatement(query);
            dbcon.ps.setString(1, jTextField5.getText());
            dbcon.ps.executeUpdate();

            query = "SELECT id FROM time_table ORDER BY id desc LIMIT 1";
            dbcon.rs = dbcon.st.executeQuery(query);
            if (dbcon.rs.next()) {
                id = dbcon.rs.getInt(1);
            }

            query = "INSERT INTO time_table_data (time_table_id,period,day,data,period_data) value(?,?,?,?,?)";

            for (int i = 0; i < table.length; i++) {
                for (int j = 0; j < table[0].length; j++) {
                    dbcon.ps = dbcon.con.prepareStatement(query);
                    dbcon.ps.setInt(1, id);
                    dbcon.ps.setInt(2, j + 1);
                    dbcon.ps.setInt(3, i + 1);
                    dbcon.ps.setString(4, table[i][j]);
                    dbcon.ps.setString(5, report[i][j]);
                    dbcon.ps.executeUpdate();
                }

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "information not saved");
            e.printStackTrace();
        }
    }

    private void UpdateDbData() {
        try {
            String query = "DELETE FROMT time_table_data where id=?";
            dbcon.ps = dbcon.con.prepareStatement(query);
            dbcon.ps.setInt(1, 0);
            dbcon.ps.executeUpdate();
            saveToDb();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Information  not saved");
            e.printStackTrace();
        }
    }

    private void fetchTable(int id) {
        String query;
        try {
            query = "Select day,name from time_table_data,time_table where time_table_id=" + id + " and time_table_data.time_table_id=time_table.id order by day desc limit 1";
            dbcon.rs = dbcon.st.executeQuery(query);
            dbcon.rs.next();
            int mday = dbcon.rs.getInt("day");
            jTextField5.setText(dbcon.rs.getString("name"));
            jTextField5.setEditable(false);
            jButton1.setEnabled(false);
            jButton3.setEnabled(true);
            jButton6.setEnabled(false);
            query = "Select period from time_table_data where time_table_id=" + id + " order by period desc limit 1";
            dbcon.rs = dbcon.st.executeQuery(query);
            dbcon.rs.next();
            int mperd = dbcon.rs.getInt("period");
            generateTable(mday, mperd - 1);
            query = "Select period,day,data,period_data from time_table_data where time_table_id=" + id + " order by period,day";
            dbcon.rs = dbcon.st.executeQuery(query);
            report = new String[mday][mperd];
            table = new String[mday][mperd];
            int i = 0;
            while (dbcon.rs.next()) {
                int day = dbcon.rs.getInt("day");
                int perd = dbcon.rs.getInt("period");
                int d = i % mday, p = (i % (mperd - 1)) + 1;
                String data = dbcon.rs.getString("data");
                String period_data = dbcon.rs.getString("period_data");
                table[d][p] = data;
                report[d][p] = period_data;
                jTable1.getModel().setValueAt(data, d, p);
                i++;
            }
        } catch (Exception e) {
            JOptionPane.showConfirmDialog(rootPane, "An Error Occur while Fetching Data");
            e.printStackTrace();
        }
    }
}
